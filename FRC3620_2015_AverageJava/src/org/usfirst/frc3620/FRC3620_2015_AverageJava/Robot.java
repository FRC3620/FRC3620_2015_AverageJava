// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3620.FRC3620_2015_AverageJava;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import org.usfirst.frc3620.FRC3620_2015_AverageJava.commands.*;
import org.usfirst.frc3620.FRC3620_2015_AverageJava.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;

	private static RobotMode currentRobotMode, previousRobotMode;

	public static OI oi;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		autonomousCommand = new AutonomousCommand();
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		// let subsystems, etc, know that we are starting up
		currentRobotMode = RobotMode.DISABLED;
		previousRobotMode = RobotMode.DISABLED;
		broadcastRobotInitToSubsystems();
	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	@Override
	public void disabledInit() {
		setRobotMode(RobotMode.DISABLED);
	}

	@Override
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
		broadcastPeriodicToSubsystems();
	}

	@Override
	public void autonomousInit() {
		setRobotMode(RobotMode.AUTONOMOUS);
		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
		broadcastPeriodicToSubsystems();
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();

		setRobotMode(RobotMode.TELEOP);

	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		broadcastPeriodicToSubsystems();
	}

	@Override
	public void testInit() {
		setRobotMode(RobotMode.TELEOP);
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
		LiveWindow.run();
		broadcastPeriodicToSubsystems();
	}

	/**
	 * let any interested subsystems inititalize.
	 */
	private void broadcastRobotInitToSubsystems() {
		/* add calls to interested subsystems here */
		// driveSubsystem.init();
	}

	private void setRobotMode(RobotMode robotMode) {
		if (robotMode != currentRobotMode) {
			previousRobotMode = currentRobotMode;
			currentRobotMode = robotMode;

			/* add calls to interested subsystems here */
			// driveSubsystem.modeChanged();
		}
	}

	/**
	 * let any interested subsystems do periodic processing.
	 */
	private void broadcastPeriodicToSubsystems() {
		/* add calls to subsystems here */
		// driveSubsystem.periodic();

		/* do any telemetry here */

	}

	public static RobotMode getCurrentRobotMode() {
		return currentRobotMode;
	}

	public static RobotMode getPreviousRobotMode() {
		return previousRobotMode;
	}

}
