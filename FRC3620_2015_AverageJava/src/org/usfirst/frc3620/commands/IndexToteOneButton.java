// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.commands;
import org.usfirst.frc3620.PreferencesNames;
import org.usfirst.frc3620.Robot;

import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 *
 */
public class IndexToteOneButton extends CommandGroup {
    
    public  IndexToteOneButton() {
        // Add Commands here:
    	
    		addSequential(new autoLiftTo(Robot.preferences.getDouble(PreferencesNames.LIFT_MIDDLE_POSITION, 8.5)));
    		addSequential(new intakeOpen());
    		addSequential(new autoLiftTo(Robot.preferences.getDouble(PreferencesNames.LIFT_BOTTOM_POSITION, 0.0)));
    		addSequential(new intakeClose());
    		addSequential(new autoLiftTo(Robot.preferences.getDouble(PreferencesNames.LIFT_TOP_POSITION, 11)));
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    }
    protected void initialize()
	{
		Robot.commandInitialized(this);
		super.initialize();
	}

	@Override
	protected void end()
	{
		Robot.commandEnded(this);
		super.end();
	}

	@Override
	protected void interrupted()
	{
		Robot.commandInterrupted(this);
		super.interrupted();
	}
}
