// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.commands;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3620.Robot;

/**
 *
 */
public class  AutonomousMove extends Command implements PIDSource, PIDOutput {

	double p = .075;
	double i = 0;
	double d = 0;
	double sideStick = 0;
	
	
	
	PIDController pidDriveStraight = new PIDController(p, i, d, this, this);
	
	
	
	
    public AutonomousMove() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        pidDriveStraight.setOutputRange(-.50, 0.50);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	System.out.println("in autonomousMove");
    	checkChange();
    	Robot.encoderSubsystem.resetEncoders();
    	Robot.drive.gyroReset();
    	pidDriveStraight.enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//checkChange();
    	System.out.println("sideStick value: " + sideStick);
    	Robot.drive.setDrive(.50, sideStick);
    }

    // Make this return true when this Command no longer needs to run execute()
    //Encoder values are returned in feet. 
    protected boolean isFinished() {
    	if(Robot.encoderSubsystem.getLeftEncoder() > 36)
    	{
    		return true;
  
    	}
    	else if(Robot.encoderSubsystem.getRightEncoder() > 36)
    	{
    		return true;
    	}
    	
    	else
    	{
    		return false;
    	}

    	
    }
    

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drive.turnMotorsOff();
    	pidDriveStraight.disable();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted()
    {
    	end();
    }

	@Override
	public void pidWrite(double output)
	{
		// TODO Auto-generated method stub
		sideStick = -output; 
	}

	@Override
	public double pidGet()
	{
		// TODO Auto-generated method stub
		return Robot.drive.getGyroAngle();
	}
	public void checkChange()
	{
		if (p != Robot.drive.getPIDp() || i != Robot.drive.getPIDi() || d != Robot.drive.getPIDd())
		{
			p = Robot.drive.getPIDp();
			i = Robot.drive.getPIDi();
			d = Robot.drive.getPIDd();
			pidDriveStraight.setPID(p, i, d);
		}
	}
}
