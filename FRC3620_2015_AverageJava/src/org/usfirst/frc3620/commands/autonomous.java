// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.commands;
import org.usfirst.frc3620.Robot;

import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 Order of autonomous
 1. Squeeze
 2. Up
 3. Forward
 4. Down (Just a little)
 5. Release
 6. Down
 7. Squeeze
 8. Up
 9. Turn 90 degrees right
 10. Forward
 11. Drop
 12. Release
 */
public class autonomous extends CommandGroup {
    
    public  autonomous() {
    	//addSequential(new AutonomousMove());
    	addSequential(new intakeClose());  //Squeeze
    	addSequential(new autoLiftTo(12)); //Up
    	addSequential(new AutoMove(2)); //Forward
    	addSequential(new ResetDriveEncoders());  //reset encoders
    	addSequential(new autoLiftTo(8));  //down just a little
    	addSequential(new intakeOpen());  //release
    	addSequential(new autoLiftTo(0)); //down
    	addSequential(new intakeClose()); //squeeze
    	addSequential(new autoLiftTo(2.5)); //up
    	addSequential(new resetGyro()); //reset gyro before turning
    	addSequential(new AutonomousTurn()); //Turn 90 degrees right
    	addSequential(new ResetDriveEncoders()); //reset encoders
    	addSequential(new AutoMove(10)); //forward
    	addSequential(new autoLiftTo(0)); //drop
    	addSequential(new intakeOpen()); //release
    	addSequential(new ResetDriveEncoders()); //reset encoders before the beginning of TeleOp.
    	addSequential(new resetGyro()); //reset gyro before beginning of TeleOp.
    	
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    }
}
